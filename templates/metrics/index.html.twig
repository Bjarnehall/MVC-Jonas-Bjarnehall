{% extends 'base.html.twig' %}

{% block title %}Metrics
{% endblock %}

{% block body %}
<div class="presentationkmom06">
<h1>Metrics analys</h1>

<h2>
Introduktion
</h2>
<p>
I samband med denna rapport kommer jag att förhålla mig till det som defineras som de sex C:na, vilka beskrivs 
i kommande avsnitt.
</p>
<h4>Codestyle:</h4> 
<p>
Genom att förhålla sig till vissa stilregler och normer erhålls en möjlighet för andra personer att 
förstå koden. Detta är värdefullt om man är flera personer som arbetar med ett projekt men även när man själv ska tillbaka
till ett kodstycke som är skrivit en tid tillbaka.
</p>
<h4>Coverage:</h4>
<p>
Är måttstock på hur mycket av koden som omfattas av testning, även kallat kodtäckning. Om en stor andel 
av den totala koden är testad antyder detta att ambition finns inom projektet då mycket tid lagts ner på detta. Coverage kan 
även användas på delar av koden som till exempel en klass eller en funktion.
</p>

<h4>Complexity:</h4>
<p>
En kodbas med hög komplexitet betyder inte nödvändigtvis att den är bra eller dålig, dock kan en hög 
komplexitet antyda att koden är svår att underhålla och bygga ut särkilt för en kodare som ska fortsätta på 
ett redan båbörjat projekt. Med tanke på nackdelarna med hög komplexitet ska det helst undvikas i den mån 
som är rimligt. En del uppgifter är väldigt komplexa och kan därför vara svåra att göra på ett enkelt sätt och i
dessa fall är det helt okej. 
</p>

<h4>Cohesion:</h4>
<p>
En klass med hög Cohesion indikerar att metoderna relaterar till varandra i hög grad. Detta, i sin tur, indikerar att
koden har ett tydligt syfte och gör i bästa fall endast en sak. I motsats till detta innebär en låg cohesion att classen 
har en lösare relation och gör många olika saker.
</p>
<h4>Coupling:</h4>
<p>
Ett begrepp som ändvänds i samband med hur starkt kopplad en funktion eller metod är kopplad till andra.
En funktion som är starkt kopplad genom att vara beroende av andra funktioner är inte modulär och kan därför ställa
till med problem i framtiden när projektet tar en annan riktning eller implementationer som inte var förutsädda 
från början dyker upp.
</p>

<h4>CRAP:</h4>
<p>
Är en kombination av complexitet i förhållande till kodtäckning. Genom att väga komplexitet mot hur väl testad
koden är kommer CRAP till nytta då vi får ett riktmärke kring hur mycket arbete med enhetstester för en metod som är rimligt
att sträva efter. En komplicerad kod kan behöva mer testning än en kod med låg komplexitet.<br>
</p>

<h3>
Phpmetrics
</h3>
<p>
Att analysera koder med metrics hjälper till att hitta svagheter genom att läsa av värden som Complexitet och 
Maintainibillty index. Metrics ger en bra översikt över vilka delar som kan behöva extra arbete detta genom tydligt
visuella atribut.</p>
<img src="{{ asset('img/metrics-start.png') }}" alt="picture of metrics" width="920">

<p>
Class Violations / App\Controller\Library\Controller<br>
Här finns förbättringspotential då för mycket funktionallitet ligger i denna controller, genom att dela upp 
koden i flera klasser skulle koden bli mer mobil.<br>

Via rapporten finner jag även att det är många av mina classer som inte omfattas av enhetstester och här finns
därför en stor potenial för förbättring. Metrics talar dessutom om att klasser med en hög komplexitet bör 
omfattas av enhetstester och här återkommmer LibraryController som en svaghet. Efter refaktorering av denna kod
bör även enhetstester skrivas.<br><br>


Det finns flera klasser som visar på en hög komplexitet och lågt maintainibillty index vilket är tydligt presenterat i
metrics.<br>
<img src="{{ asset('img/metricsstartcirle.png') }}" alt="picture of metrics" width="920">


</p>



<h3>
Scrutinizer
</h3>
<p>
I scrutinezer ges en bra möjlighet att djupdyka i koden och en mängd olika mätvärden så som CRAP och Coverage finns till hands.

Betyget för min kod i Scrutinizer får rating 10 vid en första kontroll vilket ger en antydan till att koden är bra,
däremot är kodtäckningen låg endast 15% och här finns med andra ord en förbättringpotenial. Det är även ett antal klasser
som får ett högt CRAP score och det indikerar att det är dessa klasser där stor förbättringspotenial för rafaktorering eller 
enhetstestning finns.</p>

<img src="{{ asset('img/scrutinizer-start.png') }}" alt="picture of scrutinizer" width="920">
<p>
<p>
	När jag undersöker fliken "Issues" ser jag att det finns tre klasser som inte används alls. Dessa klasser är 
	skapade under kursens gång när jag provat mig fram samt arbetat med övningsuppgifterna. Det finns en möjlighet att städa bort
	kod och få en överlag bättre kodtäckning samtidigt som jag arbetar bort några issues.
</p>

</p>
<h3>Förbättringar</h3>
<p>
Den första förbättring jag vill göra är att städa bort alternativt exkludera kod som inte är relevant
för min webbplats. Genom att göra detta blir jag av med issues så som "unused classes" men jag kommer
även att förbättra min totala kodtäckning. Det finns flera controllers som har ett dåligt maintainibillty
index score från metrics samt ett högt CRAP score. Här kommer jag att refaktorera koden genom att skapa 
eller använda befintliga klasser där koden flyttas från controller. Jag avser även att skriva enhetstester
för den koden jag refaktorerar. Avrage cyclomatic complexity by class är ett mätvärde som ges genom metrics,
målet är att genom refaktorering även kunna få ett lägre värde här.
</p>
<p>
Jag börjar mitt arbete genom att se över om det finns kod som inte används alls av min webbplats. Med hjälp av scrutinizer
påvisas att DeckOfCardsTest innehåller oanvänd kod varav dessa består i två rader som är dubbletter. Jag uppdaterar git 
och ser att en issue försvunnit. Jag finner filen LibraryTestController och att den ej används utan har blivit över från 
utvecklingstadiet denna raderas och jag stämmer av med verktygen och kan se att en violation i metrics försvunnit.
Min LibraryController påvisar en hög complexitet och lågt maintainibillty index. Här refaktoreras koden kring
uppdatering av bok och uppladdning av ny bok. Dessa Routes är ganska lika och jag gör en ny klass Library dit endel av
koden flyttas. Efteråt stämmer jag av i metrics och ser att rödmarkeringen kring denna klass försvunnit.

Cyclomatic complexity  | före: 12 efter: 7
Maintainabillity index | före: 66.48 efter: 71.13

Jag kan även se att den totala "Average cyclomatic complexity by class" sjunker ifrån 3.30 till 3.13. Ifrån Scrutinizer ser 
jag att min Coverage gick upp med 1% till 16% trots att jag ännu inte skrivit några fler tester vilket indikerar att koden 
blivit mer effektiv.
</p>
<p>
Jag fortsätter mitt arbete genom att skriva enhetstester för klassen Library och ökar total codecoverage från 16% till 22%.
Enhetstester skrivs även för DiceGraphic, Controller/Api och ökar Coverage till 25%.
</p>
<p>
I Controller\CardGame refaktoreras en del av koden, en ny klass DeckTask görs för att hantera en del av koden. Även i 
DiceGameController refaktoreras kod till DiceGameTask.
Resultatet i metrics visar att avrage cyclomatic complexity gick från: 3.13 till 2.96
även violations har minskat till 8 stycken.

Jag fortsätter genom att titta på CRAP score där testDiceHand funktionen har ett högt CRAP score jag flyttar denna kod
till DiceGameTask, enhetstest skrivs för koden. Resultatet blir att ytterligare en violation försvinner och min kodtäckning
har nu ökat till 28%. Funktionens nya CRAP score mäter 4 från tidigare 20 och Avrage bugs by class  
har minskat enligt: 0.11 till 0.9.

Vidare fortsättter jag med refaktorering i Game21, DeckOfCards, CardGame, library, och lucky endel av koden flyttas till nya eller
befintliga klasser och jag skriver sedan enhetstester. Jag fortsätter sedan med att skriva docblocks kommentarer och kan se 
att maintainibillty index ökar för flera klasser.
</p>

<h4>Resultat</h4>
<p>
I metrics sammanfattning av kodbasen syns att flera värden förändrats i en positiv riktning. Violations
har minskat till 6 från tidigare 10, avrage cyclomatic complexity har ett lägre värde på 2.89 från tidigare
3.29. Assertions in test har ökat till 66 från tidigare 37 och slutligen avrage bugs by class som fått ett nytt
värde på 0.09 från tidigare 0.11. Nedan visas bilder före och efter.
</p>
<img src="{{ asset('img/metricsStartssmall.png') }}" alt="picture of metrics" width="920">
<img src="{{ asset('img/metricsFinalsmall.png') }}" alt="picture of metrics" width="920">
<p>
I scrutinizer har coverage ökat ifrån tidigare 15% till 36%. Detta främst genom de enhetstester som skrivits men 
även genom kod som har städats bort eller skrivits på ett bättre sätt. I scrutinizer kan även en förbättring
av CRAP score på enskillda methoder ses där det högsta mätvärde på någon nu är 12, tidigare fanns ett flertal
metoder med ett CRAP score på 20+.
</p>
<p>
	Dagsaktuella värden från värden från badges scrutinizer.
</p>
<img src="https://scrutinizer-ci.com/g/Bjarnehall/MVC-Jonas-Bjarnehall/badges/quality-score.png?b=main" alt="Scrutinizer Code Quality"/>
<img src="https://scrutinizer-ci.com/g/Bjarnehall/MVC-Jonas-Bjarnehall/badges/coverage.png?b=main" alt="Code Coverage"/>
<img src="https://scrutinizer-ci.com/g/Bjarnehall/MVC-Jonas-Bjarnehall/badges/build.png?b=main" alt="Build Status"/>

</p>
<h3>
Diskussion
</h3>
<p>
Genom att arbeta med metrics och scrutinizer ges ett enkelt överblickbart sätt att hitta flaskhalsar och problem i en 
kodbas oavsett om man är väl införstådd i koden eller inte. Att arbeta med att förbättra sin kod på detta sätt är nyttigt
och jag tycker jag lärt mig mycket om min egen kodbas när jag arbetat med refaktorering framförallt. Jag tycker det är bra 
att testa sin kod även om det är en tidskrävande uppgift så leder det i längden till en bättre kodbas och mer insatta programmerare.

I många fall kan jag se att den tid det tar att arbeta med testning helt enkelt är för dyrbar och det på grund av detta inte är 
försvarbart. Men i de fall där det är känslig programvara eller för kund väldigt viktigt med driftsäkerhet är testning klart att föredra.

Andra möjligheter att arbeta vidare med "clean code" är att man skulle integrera dessa verktygen från utvecklingens början och låta
dem bli en självklar och naturlig del av det dagliga arbetet vilket jag tror är den bästa vägen som visserligen skulle innebära mer tid i
utvecklingstadiet men som skulle kunna betala sig genom att kosta mindre under livslängden i form av buggar till exempel.
</div>
</div>
<div class="spaceblock"></div>

{% endblock %}

