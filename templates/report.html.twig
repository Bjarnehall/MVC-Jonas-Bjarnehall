{% extends "base.html.twig" %}

{% block title %}Redovisning{% endblock %}

{% block body %}
<div class="menu">
                <h3>Gå till</h3>            
            <ul> 
                <p><li><a href="#kmom01"><p>kmom01</p></a></li></p>
                <p><li><a href="#kmom02"><p>kmom02</p></a></li></p>
                <p><li><a href="#kmom03"><p>kmom03</p></a></li></p>
                <p><li><a href="#kmom04"><p>kmom04</p></a></li></p>
                <p><li><a href="#kmom05"><p>kmom05</p></a></li></p>
                <p><li><a href="#kmom06"><p>kmom06</p></a></li></p>
                <p><li><a href="#kmom10"><p>kmom10</p></a></li></p>
            </ul>
</div>
<div class="presentation">
<h1>Redovisningstexter</h1>
<br>
<h2 id="kmom01">kmom01</h2>
<br>
<p>Mina förkunskaper kring objekt orienterad programmering är begränsad. Jag har stött på begreppet när jag lärt mig om
JavaScript där jag lärde mig att det var ett sätt att skriva mer strukturerad kod och var särskilt användbart när man 
bygger arrayer som ska användas av funktioner.<br>
En klass i PHP är en typ av kategori medans ett objekt är en underkategori eller tillhör en kategori. Till exempel så
kan en klass vara "ost" så kan "prästost" vara ett objekt. Objektet i sin tur kan ha olika attribut så som exempel 
lagringstid.
<br>I artiklen PHP the right way så tyckte jag delen med namesspaces var intressant och förklarade på ett bra sätt
som jag kunde förstå, liknelsen till filstruktur i en windows maskin var en bra jämförelse. Jag har även fått en bättre 
förståelse varför vi använder templates och hur composer fungerar. Mycket av vad som behandlades i artiklen förstod jag 
inte fullt ut men ser fram emot att det ska klarna vidare i kursen. 
<br>
Att arbeta med ramverket Symfony har varit kul, mycket känns igen från tidigare kurser såsom arbetet med express och pico.
Jag får en känsla av att Symfony är ett mer "komplett" ramverk, och jag gillar strukturen med routes och templates.
<br>
Min TIL för detta kursmoment är att få lära känna ramverket Symfony och ta upp PHP programmeringen ifrån Webtec kursen
igen!
</p>
<br>
<h2 id="kmom02">kmom02</h2>
<br>
<p>
Kmom02 har varit både utmanande och roligt, att få programmera en kortlek och få utmanas i det logiska tänkandet
uppskattas även om det varit svårt! Jag har fått en betydligt djupare förståelse för objektorienterad programmering och 
hur man bygger upp ett program med klasser. Att få repetera och bygga vidare på kunskaperna från databasen då vi ritade UML
diagram kändes nyttigt och gav mig en djupare förståelse. Ramverket Symfony gillar jag starkt och är något jag ser som ett 
potentiellt verktyg att använda i mitt framtida yrkesliv.<br>

Objektorienterade konstruktioner så som arv, komposition, interface och traits används i huvudsak för att skapa kod som 
är lättare att underhålla och inte behöver upprepas i större utsräckning. Jag försöker fortfarande lära mig dessa begrepp, 
men kan beskriva dem enligt följande.<br>
Arv: Tillåter en klass att använda metoder från andra klasser.
Komposition: Ett alternativ till arv med inkludering av objekt från andra klasser som en egenskap i en ny klass.
Interface: Definerar krav som klasser ska uppfylla genom vissa metoder.
Trait: Liknas vid arv men är mer fristående och kan användas av/delas mellan flera klasser.<br><br>

Jag löste uppgiften genom att först skapa tre klasser: Card, CardHand och DeckOfCards som alla har de metoder som behövs för
att skapa en kortlek (metoderna beskrivs i mitt uml diagram). Jag fortsatte senare med att skapa route och template till den 
sorterade kortleken och när jag fått den att fungera jobbade jag vidare med CSS för att kunna presentera korten visuellt vilket
var ganska knepigt och tidskrävande men jag är väldigt nöjd med resultatet. Senare fortsatte jag att utföra ett krav i taget tills 
uppgiften var löst enligt samma tillvägagångssätt. Jag är över lag nöjd med uppgiften men jag funderar på om det kanske finns ett smidigare
sätt att lösa alla routes på framöver då det blir ganska mycket kod i denna fil.<br>

Att välja ut en TIL för detta kursmoment är svårt då det varit så mycket men en sak jag fått kläm på är hur och varför man egentligen
använder DocBlocks vilket varit lite förvirrande för mig tidigare så får nog säga DocBlocks!
</p>

<h2 id="kmom03">kmom03</h2>

<p>
Redovisningstext kmom03

När vi nu i kmom03 tagit oss vidare och implementerat ett spel utav tidigare gjord kortlek känns det som att säcken är knuten, en helhet 
har skapats i  ramverket symfony.</p>
<p>
Jag tror att arbete med flödesdiagram och pseudokod är bra men om det hjälpt mig i detta kursmoment är jag osäker på. För att ha ordentlig 
nytta av det känner jag att detta är något jag behöver öva på och först när jag utvecklats mer i mitt tänkande kring problemlösning och 
även blivit säkrare i min programmering kommer detta arbetssätt belöna sig ordentligt.</p>
<p>
Under en av föreläsningarna som handlade om algoritmer och problemlösning nämndes en Polya som jag nyfiket kollade upp och såg en gammal 
föreläsning av på youtube. Denna gav mig en ny insikt över hur man kan ta sig an problemlösning och vad som egentligen menas med att förenkla 
ett problem, detta är något jag kommer ta med mig vidare i utbildningen och försöka implementera i mitt arbete för att så småningom bli en 
bättre programmerare.</p>
<P>
Uppgiften löste jag genom att göra det rekommenderade spelet 21. Jag läste noga på om reglerna innan arbetet påbörjades och gjorde sedan upp 
en skiss och skrev ner anteckningar/pseudokod för hur jag skulle implementera spelet. Jag byggde ut mitt program med en ny klass Player 
tillsammans med en ny controller Game21 och försökte sedan att återanvända så mycket kod som möjligt från mina tidigare klasser.</p>
<p>
Överlag gick uppgiften smärtfritt att lösa men det var några moment som jag fick arbeta extra mycket med. När spelaren skulle dra sitt andra 
kort efter det första kortet var draget hade jag problem och även när ess skulle värderas olika beroende på vad spelarens summa var uppe i 
var en utmaning att få fungera. Jag gjorde även en annan style med css för själva spelsidan för att spelupplevelsen skulle kännas lite 
roligare. Jag är nöjd med hur mitt spel fungerar även om jag inte har hunnit implementera de valfria kraven som skulle kunnat göra spelet 
roligare.</p>

Övningsuppgiften med att skapa en egen linters var intressant och jag har rättat till min kod till en nivå som jag själv ansåg rimlig i detta 
skede. Jag har använt mig av phpstan level 5 och phpmd. Jag har en rapport som jag är nöjd med på denna nivå med undantag ifrån ett par 
else statements som jag inte lyckats göra på annat sätt. I fortsatta kursmoment ser jag fram emot att kunna klara en högre nivå och kanske 
även kunna bli av med mina else statements.</p>
<p>
Detta kursmomentet har varit kul, tidskrävande och utvecklande jag är nöjd med vad jag åstadkommit även om jag ser förbättringspotential i 
både kod och hur mitt program fungerar i praktiken. Något jag kommer ta med mig från denna gång som en TIL är att jag börjat utveckla ett 
tankesätt kring problemlösning som jag inte tidigare haft!</p>

<br>
<h2 id="kmom04">kmom04</h2>
<br>
<p>
Det hintades i introduktions filmen till denna kurs att enhetstestning var ganska kul och jag kan inte annat än att hålla med nu när jag fått
prova. Att arbeta med phpunit har stundtals varit rejält frustrerande men belöningen att se hur kodteckningen går upp på testerna ger en belöning
likt den i matematik när man äntligen lyckas lösa ett svårt tal.</p>
<p>
Jag lyckades att få runt 90% för de klasser som skulle testas och jag har även jobbat lite på övriga klasser. För att kunna göra testerna har
jag fått skriva om lite i min kod främst försöka flytta kod från Controller till klasser. Det finns delar i min kod som jag inte lyckats skriva
tester för även om jag försökt, det finns även delar av min kod som jag inte lyckats flytta från controllers till klasser trots ansträngande 
försök. Om jag hade skrivit om hela min kodbas från början med en tanke på att testa och kanske till och med testat parrallelt under kodandet
tror jag att min kod sett annorlunda ut. Detta är något jag tar med mig framöver för att ta ytterligare ett steg till att bli en bättre
programmerare.</p>
<p>
Jag skulle nog säga att en testbar kod är snyggare kod, den testbara koden måste vara mer begriplig och mer strukturerad sedan ökar incitamentet
att återanvända kod om man måste skriva test för all kod.</p>
<p>
Avslutningsvis så tycker jag att detta kursmomentet har varit roligt och enhetstestning är absolut något jag vill lära mig mer om kanske kan
det till och med bli ett framtida arbete. Min TIL för detta kursmoment är PHPUnit!</p>

<br>
<h2 id="kmom05">kmom05</h2>
<br>
<p>
Jag är särskilt intresserad när vi jobbar med databaser och har därför uppskattat denna veckas övning och uppgift med ORM. Det är nytt för mig 
att arbeta med databaser på detta sätt och det har varit intressant att arbeta med databaser från en ny vinkel. Det gick förvånansvärt smärtfritt 
att komma igång, att ha databasen som objekt i en fil  där förfrågningar hanteras som funktioner tycker jag känns smart och smidigt.</p>
<p>
Utformningen av mitt bibliotek är så att användaren möts av en sida där denne kan välja att se utbudet eller lägga till en ny bok. Om användaren 
väljer att lägga till en ny bok möts denne av ett formulär där information om boken kan läggas till, om användaren väljer att lägga upp en bild 
sparas denna direkt i databasen via datatypen BLOB. Detta är något jag valt att göra trots att det inte anses som det mest optimala 
tillvägagångssättet. Jag tycker att det är kul att prova nya sätt att arbeta med databasen och i denna uppgift där mindre bilder används i 
applikationen har det fungerat väl. När användaren lagt till en ny bok skickas användaren tillbaka till startsidan för biblioteket.</p>
<p>
När användaren klickar på “Se våra böcker” kommer denne till en sida som visar upp alla böcker och här kan varje bok klickas på för att se detaljer 
om boken, i detta fallet är det beskrivningen som visas utöver vad som visas i översikten. Även möjligheten att ta bort en bok eller redigera en 
bok finns på sidan som visar detaljer om boken. Beskrivning av boken stod inte i uppgiften utan är något jag la till för en intressantare sida.</p>
<p>
Något jag hade problem med och som tog lång tid av felsökning var att jag valde att spara ISBN numret som en integer i databasen vilket gav mig 
mycket huvudvärk. Efter ett antal svordomar senare upptäckte jag att värdet av ISBN numret var alldeles för stort för att kunnas lagras på detta 
sätt och jag ändrade så att det lagras som en string istället.</p>
<p>
Min uppfattning av att arbeta med ORM i jämförelse med hur vi arbetade med databaser i databas kursen är att det går snabbare och smidigare och 
för många webbapplikationer är detta ett sätt att föredra. Men vid mer avancerade/större projekt kan jag uppleva att det så småningom blir en 
enda stor röra och ett traditionellt sätt att arbeta direkt med databasen som vi gjort tidigare är att föredra.</p>
<p>
Min TIL för detta kursmomentet är introduktionen till Doctrine!
</p>
<br>
<h2 id="kmom06">kmom06</h2>
<br>
<p>
Min upplevelse av att fortsätta arbeta med enhetstester och kodkvalitet har varit bra. De nya verktyg 
som introducerats har varit till stor nytta. Phpmetrics är ett bra verktyg att få en snabb översikt
på helheten och hitta de delar av koden där brister finns. Scrutinizer känns lite mer att man får leta
efter de värden man vill se men de detaljer man kan se om varje metod är värdefull. Badges i Scrutinizer
ger en snabb överblick och stämpel på koden som kan vara bra att påvisa i sitt githubrepo till exempel.

Personligen gillar jag att arbeta med kodförbättring och testning, jag tycker det ger en belöning varje gång man
lyckas få upp en procent i Coverage eller sänker ett Complexity värde på en klass. För mig känns det viktigt
att bry sig om sin kod och sitt program och då faller testning och kodkvalite natruligt. Förståelse finns 
i att det är otroligt tidskrävande att utföra och här får en rimlig avägning göras hur mycket arbete som kan läggas ned.
Här kommer verktygen till hands väldigt bra då det blir enkelt att pinpointa de svagaste punkterna och 
prioritera den tiden man har där.

Min TIL detta kursmoment är att Introduktionen till PHP metrics detta är ett verktyg jag gillar starkt och hoppas använda
i framtiden.
</p>
<br>
<h2 id="kmom10">kmom10</h2>
<br>
<h3>Krav 1-3</h3>
<p>
I det avslutande kursmomentet valde jag att bygga ett äventyrsspel. Jag började med ett ritblock och penna för att göra
en skiss av mitt spel. Idén landar i att bygga ett spel där spelaren möts av problemet att någon försöker förstöra skolans databas
på grund av missnöjdhet med sitt betyg i "Databas" kursen.
</p>
<p>
Jag definerade den enklaste möjliga lösning för mitt spel och kom fram till följande:<br>
startrum -> serverrum -> stoppa servern - > börja om
</p>
<img src="{{ asset('img/Flowchart1.png') }}" alt="FlowchartGame" width="520">

<p>
Jag skapade en så färdig lösning som möjligt av denna förenklade verision av spelet innan jag fortsatte med att implementera
övriga rum och hinder för att lyckas i spelet. I min första variant gjorde jag en ny css template, routes emellan de olika
rummen och bilder skapades i Gimp med hjälp av matrial från Pixbay. Senare valde jag att utforma mitt första hinder i spelet
genom att skapa ett POST formulär som tar emot en sträng och kontrollerar om det är rätt för att isåfall ge access till
serverrummet. Spelets utveckling fortsatte sedan och i slutändan blev det fyra visuella rum med ett antal till hörande routes
och templates för att skapa interaktivitet. Spelaren måste lista ut lösenordet och i ett avrummen finns en ledtråd i from av 
en "papperslapp" att hitta. Den text som finns på papperslappen fungerar inte för att ta sig in och spelaren får fortsätta leta. 
I ett av rummen finns det ett verktyg "decrypt device" när spelaren kör texten från papperslappen i verktyget ges ett okrypterat 
meddelande tillbaka vilken är själva lösenordet. Spelaren kan nu ta sig in i serverummet där denne möts av en karaktär som kan 
kominuceras med, här påverkar valet av konversationen vilket svar man får tillbaka och även vilken bild och sluttext som visas 
när spelet är över. Spelaren får veta att det är försent att stoppa förstörelsen av databasen och uppmanas lösa detta. I rummet 
finns ett objekt i form av en CD skiva som spelaren kan plocka upp, denna används för att återställa servern och 
spelaren har nu klarat spelet.
</p>
<p>
I mitt spel har jag använt en mängd templates som renderas genom olika routes, "adventure_items.html.twig" är en del template och 
inkluderas i ett flertal templates i form av en inventory för spelaren.c
</p>
<p>
Förutom spelet finns även en about sida som kortfattat beskriver projektet och även en matig README fil på github finns där
den mesta informationen om spelet finns samt resultat från enhetstestning. Enhetstestningen har utförts med hjälp av PHPunit
där rapporter skapats igenom Scrutinizer, jag har exkluderat de filer som inte har med projektet att göra. Utöver enhetstesting
har jag använt det linters som vi kört med i kursen för att förbättra min kod även Metrics har användts där framför allt det 
kluster diagram för komplexitet/maintainabillity används.
</p>
<h3>Krav 5 ORM</h3>
<p>
Redan från projektets början valde jag att implementera en databas till mitt spel. Här lagras de objekt som kan interageras med
av spelaren i form av ledtrådar och verktyg. Jag löste detta genom att använda den guide för doctrine som vi använt tidigare i
kursen för att skapa två Entitys: Adventure och Grades. Den förstnämda används som inventory i spelet och den sista är det som
ska räddas i spelet. När spelet startar töms båda entiteterna på dess rader och under spelets gång fylls Adventure på genom 
att plocka upp objekt eller generera med hjälp av verktyg i spelet. I Grades läggs rader till när sista momentet i spelet är 
avklarat och presenteras sedan som en tabell i slutscenen. Egentligen hade dessa rader kunnat ligga i tabellen under spelets 
gång och spelaren hade inte märkt någon skillnad men då spelet går ut på att rädda databasen kändes det mer genuint att låta 
tabellen vara tom tills dess att spelet är avklarat.
</p>
<p>
Att få bygga ett äventyrsspel har varit en kul utmaning och jag hade gärna fortsatt med mitt spel genom att bygga fler kapitel 
och nya problem att lösa. Projektet kändes lagom svårt och jag tycker att det har varit en bra uppdelning på kraven och vilka 
som är optionella. Friheten att kunna välja typ av projekt och inte vara tvungen att fortsätta på den kod som byggt under kursens
gång uppskattas. Att utföra projektet har tagit mycket tid där särskilt mycket tid har lagts på enhetstestning. Med det sagt 
så tycker jag om att arbeta med enhetstestning och det är kul att få bygga något såpass komplett som detta projekt.
</p>
<p>
Kursen MVC har gett en inblick i en mer proffisionell syn på programering och jag gillar det skarpt. Att få arbeta med ett så
pass komplett ramverk som Symfony har varit givande men även introduktionen till det objektorienterade arbetsättet med kod har 
gett en ny insikt till programvara och problemlösning. Att få testa nya sätt att arbeta med databasen har varit spännande likväl
som det har varit roligt att få introducerats till testning av kod vilket gick till på ett helt annat sätt än jag föreställt mig
innan kursen. Den mängd verktyg såsom Symfony, Scrutiniser, PHPUnit, Metrics och de linters vi arbetat med är något jag kommer
ha stor nytta av framtiden. Något jag saknar från kursen är hur man driftsätter ett projekt i Symfony i "verkligheten" när man 
inte har tillgång till studentservern. Även längre mer djupgående övningsuppgifter i de olika kursmomenten hade önskats.
Betyget jag skulle ge denna kurs är 8/10 och jag kan varmt rekomendera denna kurs!  
</p>
</div>
{% endblock %}

